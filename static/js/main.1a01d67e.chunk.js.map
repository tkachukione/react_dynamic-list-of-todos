{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","selectedUser","user","handleChange","randomTodos","selectToggle","filteredTodos","filter","todo","title","toLowerCase","includes","className","type","placeholder","name","value","onChange","selected","onClick","map","key","id","completed","readOnly","userId","URL","CurrentUser","state","getTodos","a","fetch","props","response","json","result","data","this","allData","prevProps","then","setState","clearUser","email","phone","React","Component","App","selectedUserId","event","target","select","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"oXAIaA,G,kBAAW,SAAC,GAOlB,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,aACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAgBN,EAAMO,QAAO,SAAAC,GAAI,OACrCA,EAAKC,MAAMC,cACRC,SAAST,EAAKQ,kBAGnB,OACE,yBAAKE,UAAU,YACb,sCACA,2BACEC,KAAK,OACLC,YAAY,YACZC,KAAK,OACLC,MAAOd,EACPe,SAAUd,IAEZ,4BACEY,KAAK,eACLE,SAAUZ,GAEV,4BAAQW,MAAM,MAAME,UAAQ,GAA5B,YACA,4BAAQF,MAAM,SAAd,eACA,4BAAQA,MAAM,QAAd,mBAEF,4BACEH,KAAK,SACLD,UAAU,gEAIVO,QAASf,GANX,aAWA,yBAAKQ,UAAU,4BACb,wBAAIA,UAAU,kBACXN,EAAcc,KAAI,SAAAZ,GAAI,OACrB,wBACEa,IAAKb,EAAKc,GACVV,UAAWJ,EAAKe,UACZ,yCACA,4CAGJ,+BACE,2BAAOV,KAAK,WAAWW,UAAQ,IAC/B,2BAAIhB,EAAKC,QAGX,4BACEG,UAAU,iEAKVC,KAAK,SACLM,QAAS,kBAAMlB,EAAaO,EAAKiB,UAPnC,YAUGjB,EAAKiB,iBCnEhBC,G,MAAM,kCAECC,EAAb,4MACEC,MAAQ,CACN1B,KAAM,IAFV,EAeE2B,SAfF,sBAea,8BAAAC,EAAA,sEACcC,MAAM,GAAD,OAAIL,EAAJ,kBAAiB,EAAKM,MAAMP,SAD/C,cACHQ,EADG,gBAEYA,EAASC,OAFrB,cAEHC,EAFG,yBAIFA,EAAOC,MAJL,2CAfb,uDAKE,WACEC,KAAKC,YANT,gCASE,SAAmBC,GACbA,IAAcF,KAAKL,OACrBK,KAAKC,YAXX,qBAsBE,WAAW,IAAD,OACRD,KAAKR,WAAWW,MAAK,SAAAtC,GAAI,OAAI,EAAKuC,SAAS,CAAEvC,cAvBjD,oBA0BE,WACE,IAAQwC,EAAcL,KAAKL,MAAnBU,UAER,OACE,yBAAK9B,UAAU,eACb,wBAAIA,UAAU,sBACZ,8BACGyB,KAAKT,MAAM1B,KAAKoB,KAIrB,wBAAIV,UAAU,qBAAqByB,KAAKT,MAAM1B,KAAKa,MACnD,uBAAGH,UAAU,sBAAsByB,KAAKT,MAAM1B,KAAKyC,OACnD,uBAAG/B,UAAU,sBAAsByB,KAAKT,MAAM1B,KAAK0C,OACnD,4BACEzB,QAASuB,EACT9B,UAAU,+DAGVC,KAAK,UALP,cAxCR,GAAiCgC,IAAMC,WCAjCpB,EAAM,iCAyGGqB,E,4MAtGbnB,MAAQ,CACN5B,MAAO,GACPgD,eAAgB,EAChB9C,KAAM,I,EAOR2B,S,sBAAW,8BAAAC,EAAA,sEACcC,MAAM,GAAD,OAAIL,EAAJ,WADnB,cACHO,EADG,gBAEYA,EAASC,OAFrB,cAEHC,EAFG,yBAIFA,EAAOC,MAJL,2C,EAOXjC,aAAe,SAAC8C,GACd,MAAwBA,EAAMC,OAAtBnC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKyB,SAAL,eAAiB1B,EAAOC,K,EAG1BX,aAAe,SAAC4C,GACd,IACIE,EADInC,EAAUiC,EAAMC,OAAhBlC,MAGM,SAAVA,IACFmC,GAAS,GAGG,UAAVnC,IACFmC,GAAS,GAGG,QAAVnC,IACFmC,EAASnC,GAGX,EAAKa,WAAWW,MAAK,SAAAxC,GAAK,OAAI,EAAKyC,SAAS,CAC1CzC,MACEA,EAAMO,QAAO,SAAAC,GAAI,OAAgB,QAAX2C,GAElB3C,EAAKe,YAAc4B,IADJ,OAAf3C,EAAKC,e,EAKfR,aAAe,SAACqB,GACd,EAAKmB,SAAS,CAAEO,eAAgB1B,K,EAGlCoB,UAAY,WACV,EAAKD,SAAS,CACZO,eAAgB,K,EAIpB5C,YAAc,WACZ,IAAQJ,EAAU,EAAK4B,MAAf5B,MAER,EAAKyC,UAAS,SAAAb,GAAK,MAAK,CACtB5B,MAAO,YAAIA,GAAOoD,MAAK,kBAAMC,KAAKC,SAAW,W,uDAvDjD,WACEjB,KAAKC,Y,qBA0DP,WAAW,IAAD,OACRD,KAAKR,WAAWW,MAAK,SAAAxC,GAAK,OAAI,EAAKyC,SAAS,CAC1CzC,MACEA,EAAMO,QAAO,SAAAC,GAAI,OAAmB,OAAfA,EAAKC,gB,oBAIhC,WACE,MAAkC4B,KAAKT,MAA/B5B,EAAR,EAAQA,MAAOgD,EAAf,EAAeA,eAEf,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEZ,MAAOA,EACPC,aAAcoC,KAAKpC,aACnBC,KAAMmC,KAAKT,MAAM1B,KACjBC,aAAckC,KAAKlC,aACnBC,YAAaiC,KAAKjC,YAClBC,aAAcgC,KAAKhC,gBAGvB,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,0BACZoC,EACC,kBAAC,EAAD,CACEvB,OAAQuB,EACRN,UAAWL,KAAKK,YAEhB,0B,GA/FEG,IAAMC,WCJxBS,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.1a01d67e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectedUser,\n  user,\n  handleChange,\n  randomTodos,\n  selectToggle,\n}) => {\n  const filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase()\n      .includes(user.toLowerCase())\n  ));\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Find user\"\n        name=\"user\"\n        value={user}\n        onChange={handleChange}\n      />\n      <select\n        name=\"selectedTodo\"\n        onChange={selectToggle}\n      >\n        <option value=\"all\" selected>Show all</option>\n        <option value=\"false\">Show active</option>\n        <option value=\"true\">Show completed</option>\n      </select>\n      <button\n        type=\"button\"\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\"\n        onClick={randomTodos}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={todo.completed\n                ? 'TodoList__item--checked TodoList__item'\n                : 'TodoList__item TodoList__item--unchecked'\n              }\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => selectedUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedUser: PropTypes.string.isRequired,\n  user: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  randomTodos: PropTypes.func.isRequired,\n  selectToggle: PropTypes.func.isRequired,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nconst URL = 'https://mate-api.herokuapp.com';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: '',\n  };\n\n  componentDidMount() {\n    this.allData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.allData();\n    }\n  }\n\n  getTodos = async() => {\n    const response = await fetch(`${URL}/users/${this.props.userId}`);\n    const result = await response.json();\n\n    return result.data;\n  };\n\n  allData() {\n    this.getTodos().then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {this.state.user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n        <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n        <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n        <button\n          onClick={clearUser}\n          className=\"TodoList__user-button\n            TodoList__user-button--selected\n            button\"\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\nCurrentUser.propTypes = {\n  userId: PropTypes.string.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst URL = 'https://mate-api.herokuapp.com';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    user: '',\n  };\n\n  componentDidMount() {\n    this.allData();\n  }\n\n  getTodos = async() => {\n    const response = await fetch(`${URL}/todos`);\n    const result = await response.json();\n\n    return result.data;\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  selectToggle = (event) => {\n    const { value } = event.target;\n    let select;\n\n    if (value === 'true') {\n      select = true;\n    }\n\n    if (value === 'false') {\n      select = false;\n    }\n\n    if (value === 'all') {\n      select = value;\n    }\n\n    this.getTodos().then(todos => this.setState({\n      todos:\n        todos.filter(todo => (select === 'all'\n          ? todo.title !== null\n          : todo.completed === select && todo.title !== null)),\n    }));\n  }\n\n  selectedUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  randomTodos = () => {\n    const { todos } = this.state;\n\n    this.setState(state => ({\n      todos: [...todos].sort(() => Math.random() - 0.5),\n    }));\n  };\n\n  allData() {\n    this.getTodos().then(todos => this.setState({\n      todos:\n        todos.filter(todo => todo.title !== null),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={this.selectedUser}\n            user={this.state.user}\n            handleChange={this.handleChange}\n            randomTodos={this.randomTodos}\n            selectToggle={this.selectToggle}\n          />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}